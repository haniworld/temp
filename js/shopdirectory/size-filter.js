// Generated by CoffeeScript 1.7.1
require(['underscore', 'filter'], function(_) {
   MP.SizeFilter = MP.ProductFilterView.extend({
    //el: '#category-filter',
    events: {
      'click .size-filter-select' : 'toggleSelector',
      'click #size-selector.active li a:not(.disabled)' : 'filterSelected'
    },

    initialize: function(opts) {
      MP.ProductFilterView.prototype.initialize.call(this, opts);

      this.sizes = opts.sizes;
      this.render();

      MP.dispatcher.on('filterChanged', this.updateAvailableSizes, this)
    },

    render: function() {
     // this.$('select').val(sizeId);

      if (this.$('#size-selector').length <= 0) {
        this.$el.append('<ul id="size-selector"></ul>');

        this.$('#productSizeSelect option').each(_.bind(function(i, element) {
          var indexValue, sizeValue;
          sizeValue = this.$(element).text();
          indexValue = this.$(element).attr('value');
          if (indexValue) {
            this.$('#size-selector').append('<li><a data-value="' + indexValue + '">' + sizeValue + '</a></li>');
            if(indexValue == 'all'){
              // add free size
              if(this.sizes.find(function(model){ return model.get('id') == 'F'})){
                this.$('#size-selector').append('<li><a data-value="F">フリーサイズ</a></li>');
              }
            }
          } else {
            return this.$('#size-selector').append('<li><a class="allSize" data-value="">' + sizeValue + '</a></li>');
          }
        }, this));
        this.$lblSizeFilter = this.$labelSelector = this.$('label.size-filter-select');
        this.$selector = this.$('#size-selector');
      }

      this.$('a:not([data-value=all])').toggleClass('disabled', true);
      var availableSizes = this.sizes.filter(function(s){return s.get('available') == true}, this);
      _.each(availableSizes, function(s){
        this.$('a[data-value="' + s.get('id') + '"]').toggleClass('disabled', false);
      }, this);

      var sizeIds = this.selectedSizes.get('value');

      this.$('a').toggleClass('selected', false);
      if(_.contains(sizeIds, 'all')){
        this.$('a[data-value=all]').toggleClass('selected', true);
        this.$lblSizeFilter.text('サイズ');
        if(!Utils.MediaQuery.isTouchScreen()){
          this.$lblSizeFilter.tooltip('destroy');
          this.$lblSizeFilter.tooltip({
            trigger: 'hover',
            title: "すべて"
          });
        }
      }
      else {
        _.each(sizeIds, function(id){
          this.$('a[data-value="' + id + '"]').toggleClass('selected', true);
        }, this);
        // replace the label and add tooltip
        sizeIds = sizeIds.join(', ');
        this.$lblSizeFilter.text(sizeIds);
        if(!Utils.MediaQuery.isTouchScreen()){
          this.$lblSizeFilter.tooltip('destroy');
          this.$lblSizeFilter.tooltip({
            trigger: 'hover',
            title: sizeIds
          });
        }
      }

    },

    filterSelected: function(ev) {
      var size = this.$(ev.target).data('value');
      var selectedSizes = this.selectedSizes.get('value');

      this.selectedSizes.set('value', this.getSelectedValues((!_.isArray(size) ? [String(size)]: size), selectedSizes) );

      MP.dispatcher.trigger('filterSizeChanged', this.selectedSizes.get('value'));
      // Update the product list
      MP.dispatcher.trigger('filterChanged', this.selectedCategories.get('value'), this.selectedSizes.get('value'));
      this.render(); // update the filter view
      Utils.$window.trigger('resize'); // trigger window resize to make lazyloaded images appear
    },

    updateAvailableSizes: function(){
      var selectedCategories  = this.selectedCategories.get('value');
      var available;
      this.sizes.each(function(size){
          available = _.some(size.get('categories'), function(cat){
            return _.contains(selectedCategories, 'all') || _.contains(selectedCategories, cat);
          }, this);
          size.set('available', available);
      }, this);

      this.render();
    }

  });
});
